.\" Automatically generated by Pandoc 2.12
.\"
.TH "pond" "1" "" "Version 0.9.0" "Pond User\[cq]s Guide"
.hy
.SH NAME
.PP
\f[B]pond\f[R] \[em] a shell environment manager for the fish shell
.SH SYNOPSIS
.PP
\f[B]pond\f[R] [\f[I]options\f[R]]
.PD 0
.P
.PD
\f[B]pond\f[R] \f[I]command\f[R] [\f[I]options\f[R]] \&...
.SH DESCRIPTION
.PP
A pond represents a collection of shell variables (and in a future
release functions) within the fish shell.
Ponds are used to group related shell variables together.
Naming ponds after individual applications or local development
environments is a good way to separate and control them by use-case.
.PP
Pond provides tab completion for all commands and options discussed here
in addition to pond name completion for any ponds that exist locally.
.PP
Arguments can be read from standard input when \f[B]pond\f[R] is used in
a pipeline.
For example, to remove all disabled ponds:
.PP
\f[I]Example:\f[R] \f[B]pond list --disabled | pond remove\f[R]
.PP
All arguments passed via standard input are appended to the arguments
already present in the \f[B]pond\f[R] command.
When used in this way, the \f[B]--yes\f[R] option is assumed by commands
that support this option, meaning user confirmation prompts will be
automatically accepted for those operations (see \f[B]COMMANDS\f[R] to
determine which commands this applies to), and the \f[B]--empty\f[R]
option is assumed for the \f[B]create\f[R] command.
\f[B]pond\f[R] exits 1 if the \f[B]edit\f[R] command is used without a
tty.
.SS Options
.TP
\f[B]-h,\f[R] \f[B]--help\f[R]
Print brief usage information
.TP
\f[B]-v,\f[R] \f[B]--version\f[R]
Print the current version string
.SH COMMANDS
.SS \f[B]create\f[R] [\f[B]-e\f[R]|\f[B]--empty\f[R]] [\f[B]-p\f[R]|\f[B]--private\f[R]] \f[I]pond\f[R]
.PP
Create a new pond named \f[I]pond\f[R].
Each pond comprises a directory tree containing a single file for
storing shell variable definitions (i.e.\ \f[B]set\f[R](1) commands) and
a \f[I]functions\f[R] subdirectory intended for storing
\f[I]autoloaded\f[R] fish functions (to be implemented in a future
update).
.PP
A pond may be marked \f[B]--private\f[R] during creation.
Private ponds are intended to store shell variables that contain
sensitive values (e.g.\ tokens or keys).
Private ponds are stored in a separate directory tree to regular ponds
and their collective parent directory is given 0700 permissions rather
than the 0755 permissions used by regular ponds.
In addition, private ponds may be treated differently by pond commands
introduced in future updates.
.PP
By default, a directory named \f[I]pond\f[R] is created within either
the \f[B]regular\f[R] or \f[B]private\f[R] subdirectory under
\f[B]$__fish_config_dir/pond/\f[R] dependent upon the type of the pond.
.PP
When creating a new pond, an interactive editor is opened (unless the
\f[B]--empty\f[R] option is specified) ready to add new shell variable
definitions.
See \f[B]ENVIRONMENT\f[R] for a discussion of the \f[B]pond_editor\f[R]
universal variable that controls which editor is used.
.TP
\f[B]-e\f[R], \f[B]--empty\f[R]
Create an empty pond without opening an interactive editor (this option
is inferred when using \f[B]pond\f[R] in the context of a pipeline)
.TP
\f[B]-p\f[R], \f[B]--private\f[R]
Create a private pond
.SS \f[B]remove\f[R] [\f[B]-y\f[R]|\f[B]--yes\f[R]] \f[I]ponds\&...\f[R]
.PP
Remove \f[I]ponds\f[R].
All pond data will be erased for each named pond (i.e.\ the pond
directory located in \f[B]$__fish_config_dir/pond/regular/\f[R] or
\f[B]$__fish_config_dir/pond/private/\f[R] for each named pond is
erased).
Confirmation is requested from the user for each named pond and a
\f[B]yes\f[R] response confirms removal of the named pond.
Confirmation prompts can be automatically accepted with the
\f[B]--yes\f[R] option.
.TP
\f[B]-y\f[R], \f[B]--yes\f[R]
Automatically accept confirmation prompts (this option is inferred when
using \f[B]pond\f[R] in the context of a pipeline)
.SS \f[B]list\f[R] [\f[B]-p\f[R]|\f[B]--private\f[R]] [\f[B]-r\f[R]|\f[B]--regular\f[R]] [\f[B]-e\f[R]|\f[B]--enabled\f[R]] [\f[B]-d\f[R]|\f[B]--disabled\f[R]]
.PP
List ponds.
If no options are specified, \f[I]all\f[R] pond names will be printed to
standard output, one per line (equivalent to combining all four options
\f[B]--private\f[R], \f[B]--regular\f[R], \f[B]--enabled\f[R] and
\f[B]--disabled\f[R]).
.PP
If only one of \f[B]-p\f[R]|\f[B]--private\f[R] or
\f[B]-r\f[R]|\f[B]--regular\f[R] is specified, the other option is
assumed disabled (e.g.\ by specifying \f[B]-p\f[R]|\f[B]--private\f[R]
only private ponds will be listed).
If neither option is provided both are assumed enabled.
.PP
If only one of \f[B]-e\f[R]|\f[B]--enabled\f[R] or
\f[B]-d\f[R]|\f[B]--disabled\f[R] is specified, the other option is
assumed disabled (e.g.\ by specifying \f[B]-e\f[R]|\f[B]--enabled\f[R],
only enabled ponds will be listed).
If neither option is provided both are assumed enabled.
.TP
\f[B]-p\f[R], \f[B]--private\f[R]
List private ponds
.TP
\f[B]-r\f[R], \f[B]--regular\f[R]
List regular ponds
.TP
\f[B]-e\f[R], \f[B]--enabled\f[R]
List enabled ponds
.TP
\f[B]-d\f[R], \f[B]--disabled\f[R]
List disabled ponds
.PP
\f[I]Example:\f[R] \f[B]pond list --private\f[R] (list private ponds,
both enabled and disabled)
.PP
\f[I]Example:\f[R] \f[B]pond list --disabled\f[R] (list disabled ponds,
both regular and private)
.PP
\f[I]Example:\f[R] \f[B]pond list --enabled --private\f[R] (list enabled
private ponds only)
.SS \f[B]edit\f[R] \f[I]pond\f[R]
.PP
Open an interactive editor for modifying shell variables in a pond
(i.e.\ \f[B]set\f[R](1) commands).
See \f[B]ENVIRONMENT\f[R] for a discussion of the \f[B]pond_editor\f[R]
\f[I]universal\f[R] variable that controls which editor is used.
.SS \f[B]enable\f[R] \f[I]ponds\&...\f[R]
.PP
Enable \f[I]ponds\f[R].
A symbolic link will be created in
\f[B]$__fish_config_dir/pond/links\f[R] to the pond directory for each
named pond (a pond\[cq]s directory path can be viewed using the
\f[B]status\f[R] command).
When a new shell session is created, the \f[B]env_vars.fish\f[R] file
for each enabled pond is sourced into the shell environment, making
shell variables created with the \f[B]set\f[R](1) command accessible to
the shell, and making exported variables (i.e.\ \f[B]set -x\f[R] \&...)
available to child processes of the shell.
.SS \f[B]disable\f[R] \f[I]ponds\&...\f[R]
.PP
Disable \f[I]ponds\f[R].
The symbolic link to the pond directory in
\f[B]$__fish_config_dir/pond/links\f[R] for each named pond is removed.
Any shell variables present in each named pond\[cq]s
\f[B]env_vars.fish\f[R] file will no longer be sourced into shell
sessions that are created after those ponds are disabled.
.SS \f[B]load\f[R] \f[I]ponds\&...\f[R]
.PP
Load \f[I]ponds\f[R].
The path of each named pond\[cq]s \f[B]env_vars.fish\f[R] file will be
passed to the \f[B]source\f[R](1) command and its contents evaluated in
the current shell session, making shell variables created with the
\f[B]set\f[R](1) command accessible to the current shell, and making
exported variables (i.e.\ \f[B]set -x\f[R] \&...) available to child
processes of the current shell.
.SS \f[B]unload\f[R] \f[I]ponds\&...\f[R]
.PP
Unload \f[I]ponds\f[R].
\f[B]pond\f[R] will attempt to parse each named pond\[cq]s
\f[B]env_vars.fish\f[R] file for \f[B]set\f[R](1) commands and will
erase matching shell variables from the current shell session using
\f[B]set -e\f[R].
.TP
\f[B]-v\f[R], \f[B]--verbose\f[R]
Output variable names during unload
.SS \f[B]status\f[R] [\f[I]ponds\&...\f[R]]
.PP
View global status (without arguments) or status of \f[I]ponds\f[R].
Global status includes total pond count and enabled pond count.
Pond status includes the \f[I]name\f[R] of the pond, its
\f[I]enabled\f[R] state (\f[B]yes\f[R] or \f[B]no\f[R]),
\f[I]private\f[R] state (\f[B]yes\f[R] or \f[B]no\f[R]) and the absolute
\f[I]path\f[R] to the directory comprising its data.
.SS \f[B]drain\f[R] [\f[B]-y\f[R]|\f[B]--yes\f[R]] \f[I]ponds\&...\f[R]
.PP
Drain \f[I]ponds\f[R].
All content is removed from the \f[B]env_vars.fish\f[R] file for each
named pond.
If any of the named ponds was enabled, or had been previously loaded
into the current shell session with the \f[B]load\f[R] command, then its
variables \f[I]will remain set\f[R] in the shell environment and
continue to be accessible to processes spawned by the current shell
until it exits.
.TP
\f[B]-y\f[R], \f[B]--yes\f[R]
Automatically accept confirmation prompts (this option is inferred when
using \f[B]pond\f[R] in the context of a pipeline)
.SS \f[B]dir\f[R] \f[I]pond\f[R]
.PP
Change the current working directory to the pond directory for
\f[I]pond\f[R].
.SS \f[B]config\f[R]
.PP
Print the current configuration settings.
.SH ENVIRONMENT
.PP
A number of \f[I]universal\f[R] shell variables (see \f[B]set\f[R](1)
for discussion of \f[I]universal\f[R] variables) are set during
installation.
These variables control different aspects of functionality of
\f[B]pond\f[R] and may be modified as described here:
.TP
\f[B]pond_editor\f[R]
The editor to open when using the \f[B]create\f[R] or \f[B]edit\f[R]
commands.
May be set to an absolute path or the name of a command accessible via
one of the paths specified in the \f[B]PATH\f[R] environment variable.
During installation this variable is set to the value of the
\f[B]EDITOR\f[R] environment variable, if set, or one of \f[B]vim\f[R],
\f[B]vi\f[R], \f[B]emacs\f[R], or \f[B]nano\f[R], whichever is found
first in one of the paths set in \f[B]PATH\f[R], working from left to
right.
An error may be generated during installation if no suitable editor is
found.
.TP
\f[B]pond_enable_on_create\f[R]
The value of this shell variable is set to \f[B]yes\f[R] by default and
will cause all ponds created with the \f[B]create\f[R] command to be
enabled by default.
To disable this behaviour set the value of this variable to
\f[B]no\f[R].
.RS
.PP
\f[I]Default:\f[R] \f[B]yes\f[R].
.RE
.SH EXIT STATUS
.PP
\f[B]pond\f[R] exits 0 on success, and >0 if an error occurs.
.SH BUGS
.PP
See GitHub Issues: https://github.com/marcransome/pond/issues
.SH AUTHOR
.PP
Marc Ransome <marc.ransome@fidgetbox.co.uk>
.SH SEE ALSO
.PP
fish(1), fish-doc(1), fish-completions(1), set(1)
